{"repo_token":"N852hqDzBRTjy2U9hxQ0HzGblXC9ASCTQ","source_files":[{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/jsonfile\/CoverageCollection.php","source":"<?php\n\nnamespace coveralls\\jsonfile;\n\nuse PhpCollection\\Map;\n\nclass CoverageCollection\n{\n\n    protected $lineCount = null;\n    protected $lineCoverages = null;\n\n    public function __construct($lineCount)\n    {\n        $this->lineCount = $lineCount;\n        $this->lineCoverages = new Map();\n    }\n\n    public function add(CoverageInterface $coverage)\n    {\n        $this->lineCoverages->set($coverage->getLineNumber(), $coverage);\n    }\n\n    public function at($lineAt)\n    {\n        $coverage = $this->lineCoverages->get($lineAt);\n\n        if ($coverage->isEmpty()) {\n            return null;\n        }\n\n        return $coverage->get();\n    }\n\n    public function toArray()\n    {\n        $results = array_pad([], $this->lineCount, null);\n        $coverages = $this->lineCoverages->getIterator();\n\n        foreach ($coverages as $coverage) {\n            $results[$coverage->getLineNumber() - 1] = $coverage->valueOf();\n        }\n\n        return $results;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/exception\/FileNotFoundException.php","source":"<?php\n\nnamespace coveralls\\exception;\n\nuse Exception;\nuse UnexpectedValueException;\n\nclass FileNotFoundException extends UnexpectedValueException\n{\n\n    public function __construct($path, $code = 0, Exception $previous = null)\n    {\n        parent::__construct(\"Can not find the file $path\", $code, $previous);\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/jsonfile\/SourceFile.php","source":"<?php\n\nnamespace coveralls\\jsonfile;\n\nuse coveralls\\exception\\FileNotFoundException;\n\nclass SourceFile\n{\n\n    protected $name = null;\n    protected $content = null;\n    protected $coverages = null;\n\n    public function __construct($name)\n    {\n        $this->resolvePath($name);\n        $this->resolveContent();\n    }\n\n    protected function resolvePath($name)\n    {\n        $path = realpath($name);\n\n        if (file_exists($path) === false) {\n            throw new FileNotFoundException(\"Can not find the source file $path\");\n        }\n\n        $this->name = $path;\n    }\n\n    protected function resolveContent()\n    {\n        $content = file_get_contents($this->getName());\n        $lineCount = count(explode(PHP_EOL, $content));\n        $this->content = $content;\n        $this->coverages = new CoverageCollection($lineCount);\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    public function getCoverages()\n    {\n        return $this->coverages;\n    }\n\n    public function toArray()\n    {\n        $values = [\n            'name' => $this->getName(),\n            'source' => $this->getContent(),\n            'coverage' => $this->getCoverages()->toArray(),\n        ];\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/jsonfile\/SourceFileCollection.php","source":"<?php\n\nnamespace coveralls\\jsonfile;\n\nuse PhpCollection\\Sequence;\n\nclass SourceFileCollection\n{\n\n    protected $sources = null; \n\n    public function __construct()\n    {\n        $this->sources = new Sequence();\n    }\n\n    public function add(SourceFile $source)\n    {\n        $this->sources->add($source);\n    }\n\n    public function has($source)\n    {\n        $querySource = $source;\n\n        if (gettype($source) === 'string') {\n            $querySource = new SourceFile($source);\n        }\n\n        $applyFilter = function(SourceFile $element) use ($querySource) {\n            return $element->getName() === $querySource->getName();\n        };\n\n        $results = $this->sources->filter($applyFilter);\n\n        return $results->isEmpty() === false;\n    }\n\n    public function toArray()\n    {\n        $values = [];\n        $sources = $this->sources->getIterator();\n\n        foreach ($sources as $source) {\n            $values[] = $source->toArray();\n        }\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/JSONFile.php","source":"<?php\n\nnamespace coveralls;\n\nuse coveralls\\jsonfile\\SourceFileCollection;\n\nclass JSONFile implements JSONFileInterface\n{\n\n    protected $token = null;\n    protected $sourceFiles = null;\n    protected $runAt = null;\n\n    \/**\n     * @param array $values\n     *\/\n    public function __construct(array $values)\n    {\n        foreach ($values as $key => $value) {\n            $this->$key = $value;\n        }\n    }\n\n    public function saveAs($path)\n    {\n        $content = (string) $this;\n        file_put_contents($path, $content);\n    }\n\n    public function toArray()\n    {\n        $values = array(\n            'repo_token' => $this->token,\n            'source_files' => $this->sourceFiles->toArray(),\n            'run_at' => $this->runAt\n        );\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n    \/**\n     * @param string $name\n     * @return mixed\n     *\/\n    public function __get($name)\n    {\n        return $this->$name;\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/jsonfile\/Coverage.php","source":"<?php\n\nnamespace coveralls\\jsonfile;\n\nclass Coverage implements CoverageInterface \n{\n\n    protected $lineAt = null;\n    protected $analysisResult = null;\n\n    public function __construct($lineAt, $analysisResult)\n    {\n        $this->lineAt = $lineAt;\n        $this->analysisResult = $analysisResult;\n    }\n\n    public function getLineNumber()\n    {\n        return $this->lineAt;\n    }\n\n    public function getAnalysisResult()\n    {\n        return $this->analysisResult;\n    }\n\n    public function isUnused()\n    {\n        return $this->getAnalysisResult() === static::UNUSED;\n    }\n\n    public function isExecuted()\n    {\n        return $this->getAnalysisResult() === static::EXECUTED;\n    }\n\n    public static function unused($lineAt)\n    {\n        return new static($lineAt, static::UNUSED);\n    }\n\n    public static function executed($lineAt)\n    {\n        return new static($lineAt, static::EXECUTED);\n    }\n\n    public function valueOf()\n    {\n        $value = null;\n\n        if ($this->isExecuted()) {\n            $value = static::EXECUTED;\n        } else if ($this->isUnused()) {\n            $value = static::UNUSED;\n        }\n\n        return $value;\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/JSONFileBuilder.php","source":"<?php\n\nnamespace coveralls;\n\nuse coveralls\\JSONFile;\nuse coveralls\\jsonfile\\SourceFile;\nuse coveralls\\jsonfile\\SourceFileCollection;\n\nclass JSONFileBuilder\n{\n\n    protected $token = null;\n    protected $sourceFiles = null;\n\n    public function __construct()\n    {\n        $this->sourceFiles = new SourceFileCollection();\n    }\n\n    public function token($repositoryToken)\n    {\n        $this->token = $repositoryToken;\n        return $this;\n    }\n\n    public function addSource(SourceFile $source)\n    {\n        $this->sourceFiles->add($source);\n        return $this;\n    }\n\n    public function build()\n    {\n        return new JSONFile([\n            'token' => $this->token,\n            'sourceFiles' => $this->sourceFiles,\n            'runAt' => date('Y-m-d H:i:s O') \/\/\/\/2013-02-18 00:52:48 -0800\n        ]);\n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/jsonfile\/CoverageInterface.php","source":"<?php\n\nnamespace coveralls\\jsonfile;\n\ninterface CoverageInterface\n{\n\n    const UNUSED = 0;\n    const EXECUTED = 1;\n\n    \/**\n     * @return integer\n     *\/\n    public function getLineNumber();\n\n    \/**\n     * @return boolean\n     *\/\n    public function isUnused();\n\n    \/**\n     * @return boolean\n     *\/\n    public function isExecuted();\n\n    \/**\n     * @return mixed\n     *\/\n    public function valueOf(); \n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/environment\/TravisCI.php","source":"<?php\n\nnamespace coveralls\\environment;\n\nclass TravisCI\n{\n\n    protected $jobId;\n    protected $serviceName;\n\n    public function __construct($serviceName = 'travis-ci')\n    {\n        $this->jobId = getenv('TRAVIS_JOB_ID');\n        $this->serviceName = $serviceName;\n    }\n\n    public function __get($name)\n    {\n        return $this->$name;            \n    }\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/src\/JSONFileInterface.php","source":"<?php\n\nnamespace coveralls;\n\ninterface JSONFileInterface\n{\n\n    public function saveAs($path);\n\n}\n","coverage":[1,null,null,null,null,null,null,null,null,null,null]},{"name":"\/Users\/shared-hat\/Documents\/develop\/coveralls-kit\/script\/coveralls.php","source":"<?php\n\nnamespace coveralls\\example;\n\nrequire_once __DIR__ . '\/..\/vendor\/autoload.php';\n\nuse coveralls\\JSONFileBuilder;\nuse coveralls\\jsonfile\\Coverage;\nuse coveralls\\jsonfile\\SourceFile;\nuse Guzzle\\Http\\Client;\n\n\/**\n * Get the code coverage\n *\/\nxdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);\n\n$argv = array('..\/vendor\/bin\/pho', '--reporter', 'spec');\n\nrequire_once __DIR__ . \"\/..\/vendor\/bin\/pho\";\n\n$result = xdebug_get_code_coverage();\nxdebug_stop_code_coverage();\n\n\n\/**\n * Generate a json file\n *\/\n$builder = new JSONFileBuilder();\n$builder->token('N852hqDzBRTjy2U9hxQ0HzGblXC9ASCTQ');\n\nforeach ($result as $file => $coverage) {\n    if (preg_match('\/vendor\/', $file) || preg_match('\/spec\/', $file)) {\n        continue;\n    }\n\n    $source = new SourceFile($file);\n    $coverages = $source->getCoverages();\n\n    foreach ($coverage as $line => $status) {\n        if ($status === 1) {\n            $coverages->add(Coverage::executed(1));\n        } else if ($status === -1) {\n            $coverages->add(Coverage::unused(1));\n        }\n    }\n\n    $builder->addSource($source);\n}\n\n$coverageFile = __DIR__ . '\/coverage.json';\n\n$builder->build()->saveAs($coverageFile);\n\n$client = new Client();\n$request = $client->post('https:\/\/coveralls.io\/api\/v1\/jobs')\n    ->addPostFiles(array(\n        'json_file' => realpath($coverageFile)\n    ));\n\n$request->send();\n","coverage":[1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}],"run_at":"2014-03-22 13:40:27 +0900"}