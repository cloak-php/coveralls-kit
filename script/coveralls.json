{"repo_token":false,"git":{"head":{"id":"abb2df4453051d0355f3518a0ae516f8650533a6","author_name":"holyshared","author_email":"holy.shared.design@gmail.com","committer_name":"holyshared","committer_email":"holy.shared.design@gmail.com","message":"add method\n"},"branch":"1.2.1-wip","remotes":[{"name":"origin","url":"https:\/\/github.com\/holyshared\/coveralls-kit.git"}]},"source_files":[{"name":"src\/ArrayConvertible.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\ninterface ArrayConvertible\n{\n\n    \/**\n     * @return array\n     *\/\n    public function toArray();  \n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/service\/Travis.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity\\service;\n\nuse coverallskit\\AttributePopulatable;\n\nclass Travis implements TravisInterface\n{\n\n    use AttributePopulatable;\n\n    protected $serviceJobId;\n    protected $serviceName;\n\n    public function __construct($serviceName = self::SERVICE_CI)\n    {\n        $this->serviceJobId = getenv(self::ENV_JOB_ID);\n        $this->serviceName = $serviceName;\n    }\n\n    public function getServiceJobId()\n    {\n        return $this->serviceJobId;\n    }\n\n    public function getServiceName()\n    {\n        return $this->serviceName;\n    }\n\n    public function isEmpty()\n    {\n        $serviceName = $this->getServiceName();\n        return empty($serviceName);\n    }\n\n    public function toArray()\n    {\n        $values = [\n            'service_job_id' => $this->getServiceJobId(),\n            'service_name' => $this->getServiceName()\n        ];\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n    public static function travisCI()\n    {\n        return new static();\n    }\n\n    public static function travisPro()\n    {\n        return new static(self::SERVICE_PRO);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,1,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,null,0,0,0,null,0,null,null,null,null,0,null,null,null,null,1,null,null,null,null,1,null,null,1]},{"name":"src\/entity\/repository\/Branch.php","source":"<?php\n\nnamespace coverallskit\\entity\\repository;\n\nuse coverallskit\\EntityInterface;\nuse coverallskit\\AttributePopulatable;\n\nclass Branch implements EntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $name = null;\n    protected $remote = null;\n\n    public function __construct(array $values)\n    {\n        $this->populate($values);\n    }\n\n    \/**\n     * @return string \n     *\/\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    \/**\n     * @return boolean \n     *\/\n    public function isRemote()\n    {\n        return $this->remote;\n    }\n\n    \/**\n     * @return boolean \n     *\/\n    public function isEmpty()\n    {\n        return $this->name === null;\n    }\n\n    \/**\n     * @return string \n     *\/\n    public function __toString()\n    {\n        return $this->getName();\n    }\n\n}","coverage":[null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,1]},{"name":"src\/ReportBuilder.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\entity\\Report;\nuse coverallskit\\entity\\RepositoryInterface;\nuse coverallskit\\entity\\SourceFile;\nuse coverallskit\\entity\\collection\\SourceFileCollection;\nuse coverallskit\\entity\\service\\ServiceInterface;\n\n\/**\n * Class ReportBuilder\n * @package coverallskit\n *\/\nclass ReportBuilder implements ReportBuilderInterface\n{\n\n    protected $name = null;\n    protected $token = null;\n    protected $service = null;\n    protected $repository = null;\n    protected $sourceFiles = null;\n\n    public function __construct()\n    {\n        $this->sourceFiles = new SourceFileCollection();\n    }\n\n    public function name($name)\n    {\n        $this->name = $name;\n        return $this;\n    }\n\n    public function token($repositoryToken)\n    {\n        $this->token = $repositoryToken;\n        return $this;\n    }\n\n    public function service(ServiceInterface $service)\n    {\n        $this->service = $service;\n        return $this;\n    }\n\n    public function repository(RepositoryInterface $repository)\n    {\n        $this->repository = $repository;\n        return $this;\n    }\n\n    public function addSource(SourceFile $source)\n    {\n        $this->sourceFiles->add($source);\n        return $this;\n    }\n\n    \/**\n     * @return \\coverallskit\\entity\\ReportInterface\n     *\/\n    public function build()\n    {\n        return new Report([\n            'name' => $this->name,\n            'token' => $this->token,\n            'repository' => $this->repository,\n            'service' => $this->service,\n            'sourceFiles' => $this->sourceFiles,\n            'runAt' => date('Y-m-d H:i:s O') \/\/\/\/2013-02-18 00:52:48 -0800\n        ]);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,1,null,null,null,null,1,1,null,null,null,null,1,1,null,null,null,null,1,1,null,null,null,null,1,1,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,null,null,null]},{"name":"src\/entity\/SourceFile.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\entity\\CoverageInterface;\nuse coverallskit\\entity\\collection\\CoverageCollection;\nuse coverallskit\\exception\\FileNotFoundException;\nuse coverallskit\\AttributePopulatable;\nuse coverallskit\\exception\\LineOutOfRangeException;\nuse coverallskit\\value\\LineRange;\n\nclass SourceFile implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $name = null;\n    protected $content = null;\n    protected $coverages = null;\n    protected $realLineRange = null; \n\n    \/**\n     * @param string $name\n     *\/\n    public function __construct($name)\n    {\n        $this->resolvePath($name);\n        $this->resolveContent();\n    }\n\n    protected function resolvePath($name)\n    {\n        $path = realpath($name);\n\n        if (file_exists($path) === false) {\n            throw new FileNotFoundException(\"Can not find the source file $path\");\n        }\n\n        $this->name = $path;\n    }\n\n    protected function resolveContent()\n    {\n        $content = file_get_contents($this->getName());\n        $realLineCount = count(explode(PHP_EOL, $content));\n\n        $this->realLineRange = new LineRange(1, $realLineCount);\n\n        $content = trim($content);\n        $lineCount = count(explode(PHP_EOL, $content));\n\n        $this->content = $content;\n        $this->coverages = new CoverageCollection($lineCount);\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function getPathFromCurrentDirectory()\n    {\n        return str_replace(getcwd() . '\/', '', $this->getName());\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    public function getCoverages()\n    {\n        return $this->coverages;\n    }\n\n    public function addCoverage(CoverageInterface $coverage)\n    {\n        try {\n            $this->coverages->add($coverage);\n        } catch (LineOutOfRangeException $exception) {\n            if ($this->realLineRange->contains($coverage)) {\n                return;\n            }\n            throw $exception;\n        }\n    }\n\n    public function removeCoverage($coverage)\n    {\n        $lineNumber = $coverage;\n\n        if ($coverage instanceof CoverageInterface) {\n            $lineNumber = $coverage->getLineNumber();\n        }\n\n        $this->coverages->removeAt($lineNumber);\n    }\n\n    public function getCoverage($lineNumber)\n    {\n        return $this->coverages->at($lineNumber);\n    }\n\n    public function isEmpty()\n    {\n        $content = $this->getContent();\n        return empty($content);\n    }\n\n    public function toArray()\n    {\n        $values = [\n            'name' => $this->getPathFromCurrentDirectory(),\n            'source' => $this->getContent(),\n            'coverage' => $this->getCoverages()->toArray(),\n        ];\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,1,null,1,1,null,null,1,1,null,null,null,1,1,null,1,null,1,1,null,1,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,1,1,0,0,null,0,null,1,null,null,null,0,null,0,0,0,null,0,0,null,null,null,1,null,null,null,null,1,1,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,1,null,null,1]},{"name":"src\/entity\/service\/TravisInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity\\service;\n\ninterface TravisInterface extends ServiceInterface\n{\n\n    const SERVICE_CI = 'travis-ci';\n    const SERVICE_PRO = 'travis-pro';\n\n    const ENV_JOB_ID = 'TRAVIS_JOB_ID';\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/repository\/Commit.php","source":"<?php\n\nnamespace coverallskit\\entity\\repository;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\AttributePopulatable;\n\nclass Commit implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $id = null;\n    protected $authorName = null;\n    protected $authorEmail = null;\n    protected $committerName = null;\n    protected $committerEmail = null;\n    protected $message = null;\n\n    public function __construct(array $values)\n    {\n        $this->populate($values);\n    }\n\n    public function isEmpty()\n    {\n        return $this->getHash() === null;\n    }\n\n    public function getHash()\n    {\n        return $this->id;\n    }\n\n    public function getAuthorName()\n    {\n        return $this->authorName;\n    }\n\n    public function getAuthorEmail()\n    {\n        return $this->authorEmail;\n    }\n\n    public function getCommitterName()\n    {\n        return $this->committerName;\n    }\n\n    public function getCommitterEmail()\n    {\n        return $this->committerEmail;\n    }\n\n    public function getMessage()\n    {\n        return $this->message;\n    }\n\n    public function toArray()\n    {\n        return [\n            'id' => $this->getHash(),\n            'author_name' => $this->getAuthorName(),\n            'author_email' => $this->getAuthorEmail(),\n            'committer_name' => $this->getCommitterName(),\n            'committer_email' => $this->getCommitterEmail(),\n            'message' => $this->getMessage()\n        ];\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,1,1,1,1,1,1,1,null,null,null,null,1,null,null,1]},{"name":"src\/exception\/FileNotFoundException.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\exception;\n\nuse Exception;\nuse UnexpectedValueException;\n\nclass FileNotFoundException extends UnexpectedValueException\n{\n\n    public function __construct($path, $code = 0, Exception $previous = null)\n    {\n        parent::__construct(\"Can not find the file $path\", $code, $previous);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,null]},{"name":"src\/ReportBuilderInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\entity\\RepositoryInterface;\nuse coverallskit\\entity\\service\\ServiceInterface;\n\n\/**\n * Interface ReportBuilderInterface\n * @package coverallskit\n *\/\ninterface ReportBuilderInterface\n{\n\n    \/**\n     * @param string\n     * @return $this;\n     *\/\n    public function name($name);\n\n    \/**\n     * @param string\n     * @return $this;\n     *\/\n    public function token($repositoryToken);\n\n    \/**\n     * @param ServiceInterface\n     * @return $this;\n     *\/\n    public function service(ServiceInterface $service);\n\n    \/**\n     * @param RepositoryInterface\n     * @return $this;\n     *\/\n    public function repository(RepositoryInterface $repository);\n\n    \/**\n     * @return \\coverallskit\\entity\\ReportInterface\n     *\/\n    public function build();\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/CompositeEntityInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\ninterface CompositeEntityInterface extends EntityInterface, ArrayConvertible\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"src\/exception\/NotSupportFileTypeException.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\exception;\n\nuse Exception;\nuse UnexpectedValueException;\n\nclass NotSupportFileTypeException extends UnexpectedValueException\n{\n\n    public function __construct($path, $code = 0, Exception $previous = null)\n    {\n        $result = preg_match(\"\/.+(\\..+)$\/\", $path, $matches);\n        $fileType = ($result === 1) ? array_pop($matches) : $path;\n\n        parent::__construct(\"The $fileType file type is not supported.\", $code, $previous);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,1,1,null,null]},{"name":"src\/ConfigurationLoaderInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\n\/**\n * Interface ConfigurationLoaderInterface\n * @package coverallskit\n *\/\ninterface ConfigurationLoaderInterface\n{\n\n    \/**\n     * @param string $file\n     * @return Configuration\n     *\/\n    public function loadFromFile($file);\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/collection\/SourceFileCollection.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity\\collection;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\entity\\SourceFile;\nuse PhpCollection\\Sequence;\nuse coverallskit\\AttributePopulatable;\n\nclass SourceFileCollection implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $sources = null; \n\n    public function __construct()\n    {\n        $this->sources = new Sequence();\n    }\n\n    public function add(SourceFile $source)\n    {\n        $this->sources->add($source);\n    }\n\n    public function has($source)\n    {\n        $querySource = $source;\n\n        if (gettype($source) === 'string') {\n            $querySource = new SourceFile($source);\n        }\n\n        $applyFilter = function(SourceFile $element) use ($querySource) {\n            return $element->getName() === $querySource->getName();\n        };\n\n        $results = $this->sources->filter($applyFilter);\n\n        return $results->isEmpty() === false;\n    }\n\n    public function isEmpty()\n    {\n        return $this->sources->isEmpty();\n    }\n\n    public function toArray()\n    {\n        $values = [];\n        $sources = $this->sources->getIterator();\n\n        foreach ($sources as $source) {\n            $values[] = $source->toArray();\n        }\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,1,1,null,null,null,1,1,null,null,null,1,null,1,1,1,null,1,1,1,null,1,null,1,null,null,null,null,1,null,null,null,null,1,1,null,1,1,1,null,1,null,null,null,null,1,null,null,1]},{"name":"src\/ConfigurationLoader.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\exception\\FileNotFoundException;\nuse coverallskit\\exception\\NotSupportFileTypeException;\nuse coverallskit\\entity\\service\\Travis;\nuse Symfony\\Component\\Yaml\\Yaml;\nuse coverallskit\\entity\\Repository;\n\n\/**\n * Class ConfigurationLoader\n * @package coverallskit\n *\/\nclass ConfigurationLoader implements ConfigurationLoaderInterface\n{\n\n    \/**\n     * @param string $file\n     * @return Configuration\n     * @throws FileNotFoundException\n     *\/\n    public function loadFromFile($file)\n    {\n        if ($this->fileExists($file) === false) {\n            throw new FileNotFoundException($file);\n        }\n\n        if ($this->isYamlFile($file)) {\n            return $this->loadFromYamlFile($file);\n        }\n\n        throw new NotSupportFileTypeException($file);\n    }\n\n    \/**\n     * @param string $file\n     * @return Configuration\n     * @throws FileNotFoundException\n     *\/\n    private function loadFromYamlFile($file)\n    {\n\n        $attributes = $values = Yaml::parse($file);\n\n        if (isset($values['service'])) {\n            $attributes['service'] = $this->serviceFromString($values['service']);\n        }\n\n        if (isset($values['repositoryDirectory'])) {\n            $path = $values['repositoryDirectory'];\n            $attributes['repository'] = $this->repositoryFromPath($path);\n            unset($attributes['repositoryDirectory']);\n        }\n\n        return new Configuration($attributes);\n    }\n\n    \/**\n     * @param $file\n     * @return boolean\n     *\/\n    private function fileExists($file)\n    {\n        return file_exists($file);\n    }\n\n    \/**\n     * @param $file\n     * @return boolean\n     *\/\n    private function isYamlFile($file)\n    {\n        return preg_match('\/(\\.yml|yaml)$\/', $file) === 1;\n    }\n\n    \/**\n     * @param string $serviveName\n     * @return \\coverallskit\\entity\\service\\ServiceInterface\n     *\/\n    private function serviceFromString($serviveName)\n    {\n        if ($serviveName === 'travis-ci') {\n            return Travis::travisCI();\n        } else if ($serviveName === 'travis-pro') {\n            return Travis::travisPro();\n        }\n    }\n\n    \/**\n     * @param string $path\n     * @return \\coverallskit\\entity\\Repository\n     *\/\n    private function repositoryFromPath($path)\n    {\n        $directory = realpath($path . '\/');\n        $repository = new Repository($directory);\n\n        return $repository;\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,1,null,null,1,1,null,null,1,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,1,1,1,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,0,0,null,0,null,null,null,null,null,null,null,1,1,null,1,null,null,null]},{"name":"src\/entity\/repository\/Remote.php","source":"<?php\n\nnamespace coverallskit\\entity\\repository;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\AttributePopulatable;\n\nclass Remote implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $name = null;\n    protected $url = null;\n\n    public function __construct(array $values = [])\n    {\n        $this->populate($values);\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function getURL()\n    {\n        return $this->url;\n    }\n\n    public function isEmpty()\n    {\n        return ($this->getName() === null) || ($this->getURL() === null);\n    }\n\n    public function toArray()\n    {\n        return [\n            'name' => $this->getName(),\n            'url' => $this->getURL()\n        ];\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,1,1,1,null,null,null,null,1,null,null,1]},{"name":"src\/entity\/service\/ServiceInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity\\service;\n\nuse coverallskit\\CompositeEntityInterface;\n\ninterface ServiceInterface extends CompositeEntityInterface\n{\n\n    \/**\n     * @return string\n     *\/\n    public function getServiceJobId();\n\n    \/**\n     * @return string\n     *\/\n    public function getServiceName();\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/EntityInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\ninterface EntityInterface\n{\n\n    \/**\n     * @param array\n     *\/\n    public function populate(array $values);\n\n    \/**\n     * @return boolean\n     *\/\n    public function isEmpty();  \n\n    \/**\n     * @return string\n     *\/\n    public function __toString();  \n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/collection\/RemoteCollection.php","source":"<?php\n\nnamespace coverallskit\\entity\\collection;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\entity\\repository\\Remote;\nuse PhpCollection\\Sequence;\nuse coverallskit\\AttributePopulatable;\n\nclass RemoteCollection implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $remotes = null;\n\n    public function __construct(array $remotes = [])\n    {\n        $this->remotes = new Sequence($remotes);\n    }\n\n    public function add(Remote $remote)\n    {\n        return $this->remotes->add($remote);\n    }\n\n    public function isEmpty()\n    {\n        return $this->remotes->isEmpty();\n    }\n\n    public function toArray()\n    {\n        $arrayValues = [];\n        $remotes = $this->remotes->getIterator();\n\n        foreach ($remotes as $remote) {\n            $arrayValues[] = $remote->toArray();\n        }\n\n        return $arrayValues;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,1,null,1,1,1,null,1,null,null,null,null,1,null,null,1]},{"name":"src\/entity\/CoverageInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\ninterface CoverageInterface\n{\n\n    const UNUSED = 0;\n    const EXECUTED = 1;\n\n    \/**\n     * @return integer\n     *\/\n    public function getLineNumber();\n\n    \/**\n     * @return boolean\n     *\/\n    public function isUnused();\n\n    \/**\n     * @return boolean\n     *\/\n    public function isExecuted();\n\n    \/**\n     * @return integer|null\n     *\/\n    public function valueOf(); \n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/ReportInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nuse coverallskit\\CompositeEntityInterface;\n\ninterface ReportInterface extends CompositeEntityInterface\n{\n\n    const DEFAULT_NAME = 'coverage.json';\n\n    public function getName();\n\n    public function saveAs($path);\n\n    public function upload();\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/ReportUpLoaderInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\entity\\ReportInterface;\nuse Guzzle\\Http\\ClientInterface;\n\ninterface ReportUpLoaderInterface\n{\n\n    const ENDPOINT_URL = 'https:\/\/coveralls.io\/api\/v1\/jobs';\n    const JSON_FILE_POST_FIELD_NAME = 'json_file';\n\n    \/**\n     * @param Guzzle\\Http\\ClientInterface $client\n     *\/\n    public function setClient(ClientInterface $client);\n\n    \/**\n     * @return Guzzle\\Http\\ClientInterface\n     *\/\n    public function getClient();\n\n    \/**\n     * @param entity\\ReportInterface $jsonFile\n     *\/\n    public function upload(ReportInterface $report);\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/exception\/LineOutOfRangeException.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\exception;\n\nuse coverallskit\\value\\LineRange;\nuse coverallskit\\entity\\CoverageInterface;\nuse Exception;\nuse OutOfRangeException;\n\nclass LineOutOfRangeException extends OutOfRangeException\n{\n\n    public function __construct(CoverageInterface $coverage, LineRange $range, $code = 0, Exception $previous = null)\n    {\n        $template = \"The %dst line is outside the range of the %dth line from the %dst line\";\n        $message = sprintf($template, $coverage->getLineNumber(), $range->getLastLineNumber(), $range->getFirstLineNumber());\n\n        parent::__construct($message, $code, $previous);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,1,1,null,null]},{"name":"src\/entity\/Coverage.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nclass Coverage implements CoverageInterface \n{\n\n    protected $lineAt = null;\n    protected $analysisResult = null;\n\n    \/**\n     * @param integer $lineAt\n     * @param integer $analysisResult\n     *\/\n    public function __construct($lineAt, $analysisResult)\n    {\n        $this->lineAt = $lineAt;\n        $this->analysisResult = $analysisResult;\n    }\n\n    public function getLineNumber()\n    {\n        return $this->lineAt;\n    }\n\n    public function getAnalysisResult()\n    {\n        return $this->analysisResult;\n    }\n\n    public function isUnused()\n    {\n        return $this->getAnalysisResult() === static::UNUSED;\n    }\n\n    public function isExecuted()\n    {\n        return $this->getAnalysisResult() === static::EXECUTED;\n    }\n\n    public function isValidLine($lineCount)\n    {\n        return $this->getLineNumber() >= 1 && $this->getLineNumber() <= $lineCount;\n    }\n\n    public static function unused($lineAt)\n    {\n        return new static($lineAt, static::UNUSED);\n    }\n\n    public static function executed($lineAt)\n    {\n        return new static($lineAt, static::EXECUTED);\n    }\n\n    public function valueOf()\n    {\n        $value = null;\n\n        if ($this->isExecuted()) {\n            $value = static::EXECUTED;\n        } else if ($this->isUnused()) {\n            $value = static::UNUSED;\n        }\n\n        return $value;\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,0,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,1,1,1,1,1,null,1,null,null,null]},{"name":"src\/entity\/Report.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nuse coverallskit\\ReportUpLoader;\nuse coverallskit\\ReportUpLoaderInterface;\nuse coverallskit\\AttributePopulatable;\n\nclass Report implements ReportInterface\n{\n\n    use AttributePopulatable;\n\n    protected $name = null;\n    protected $token = null;\n    protected $service = null;\n    protected $repository = null;\n    protected $sourceFiles = null;\n    protected $runAt = null;\n    protected $uploader = null;\n\n    \/**\n     * @param array $values\n     *\/\n    public function __construct(array $values = [])\n    {\n        $this->name = getcwd() . '\/' . static::DEFAULT_NAME;\n        $this->populate($values);\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function saveAs($path)\n    {\n        $this->name = $path;\n        $this->save();\n\n        return $this; \n    }\n\n    public function save()\n    {\n        $content = (string) $this;\n        file_put_contents($this->name, $content);\n        return $this;\n    }\n\n    public function setUpLoader(ReportUpLoaderInterface $uploader)\n    {\n        $this->uploader = $uploader;\n    }\n\n    public function getUpLoader()\n    {\n        if ($this->uploader === null) {\n            $this->uploader = new ReportUpLoader();\n        }\n\n        return $this->uploader;\n    }\n\n    public function upload()\n    {\n        $fileName = $this->getName();\n\n        if (file_exists($fileName) === false) {\n            $this->saveAs($fileName);\n        }\n\n        $this->getUpLoader()->upload($this);\n    }\n\n    public function isEmpty()\n    {\n        return $this->token === null || $this->service->isEmpty() || $this->sourceFiles->isEmpty();\n    }\n\n    public function toArray()\n    {\n        $values = array(\n            'repo_token' => $this->token,\n            'git' => $this->repository->toArray(),\n            'source_files' => $this->sourceFiles->toArray(),\n            'run_at' => $this->runAt\n        );\n\n        $serviceValues = $this->service->toArray();\n        foreach ($serviceValues as $key => $value) {\n            $values[$key] = $value;\n        }\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n    \/**\n     * @param string $name\n     * @return mixed\n     *\/\n    public function __get($name)\n    {\n        return $this->$name;\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,1,null,null,null,null,1,1,null,1,null,null,null,null,1,1,1,null,null,null,null,1,1,null,null,null,1,0,0,null,1,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,1,null,null,null,null,null,1,1,1,1,1,null,1,1,1,1,null,1,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,1]},{"name":"src\/ReportUpLoader.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\entity\\ReportInterface;\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Http\\ClientInterface;\n\nclass ReportUpLoader implements ReportUpLoaderInterface\n{\n\n    protected $client = null;\n\n    public function __construct(ClientInterface $client = null)\n    {\n        $httpClient = $client;\n\n        if ($httpClient === null) {\n            $httpClient = new Client();\n        }\n        $this->setClient($httpClient);\n    }\n\n    public function setClient(ClientInterface $client)\n    {\n        $this->client = $client;\n    }\n\n    public function getClient()\n    {\n        return $this->client;\n    }\n\n    public function upload(ReportInterface $report)\n    {\n        $request = $this->getClient()->post(static::ENDPOINT_URL);\n        $request->addPostFiles([\n            static::JSON_FILE_POST_FIELD_NAME => $report->getName()\n        ]);\n        $request->send();\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,1,1,1,1,1,null,null,null,1,1,null,null,null,1,null,null,null,null,1,1,1,1,1,1,null,null]},{"name":"src\/exception\/BadAttributeException.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\exception;\n\nuse Exception;\nuse UnexpectedValueException;\n\nclass BadAttributeException extends UnexpectedValueException\n{\n\n    public function __construct($attributeName, $code = 0, Exception $previous = null)\n    {\n        parent::__construct(\"Can not find the attributes $attributeName\", $code, $previous);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,null]},{"name":"src\/AttributePopulatable.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\exception\\BadAttributeException;\n\ntrait AttributePopulatable\n{\n\n    private function populate(array $values)\n    {\n        foreach ($values as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n\n            if (method_exists($this, $setter) === true) {\n                $this->$setter($value);\n            } else if (property_exists($this, $key) === true) {\n                $this->$key = $value;\n            } else {\n                throw new BadAttributeException($key);\n            }\n        }\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,1,1,1,1,1,1,null,1,1,null,null]},{"name":"src\/entity\/collection\/CoverageCollection.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity\\collection;\n\nuse coverallskit\\CompositeEntityInterface;\nuse coverallskit\\entity\\CoverageInterface;\nuse coverallskit\\value\\LineRange;\nuse coverallskit\\AttributePopulatable;\nuse coverallskit\\exception\\LineOutOfRangeException;\nuse PhpCollection\\Map;\n\nclass CoverageCollection implements CompositeEntityInterface\n{\n\n    use AttributePopulatable;\n\n    protected $lineRange = null;\n    protected $lineCoverages = null;\n\n    \/**\n     * @param integer $lineCount\n     *\/\n    public function __construct($lineCount)\n    {\n        $this->lineRange = new LineRange(1, $lineCount);\n        $this->lineCoverages = new Map();\n    }\n\n    public function add(CoverageInterface $coverage)\n    {\n        if ($this->lineRange->contains($coverage->getLineNumber()) === false) {\n            throw new LineOutOfRangeException($coverage, $this->lineRange);\n        }\n        $this->lineCoverages->set($coverage->getLineNumber(), $coverage);\n    }\n\n    public function remove(CoverageInterface $coverage)\n    {\n        $this->removeAt($coverage->getLineNumber());\n    }\n\n    public function removeAt($lineNumber)\n    {\n        $this->lineCoverages->remove($lineNumber);\n    }\n\n    public function at($lineAt)\n    {\n        $coverage = $this->lineCoverages->get($lineAt);\n\n        if ($coverage->isEmpty()) {\n            return null;\n        }\n\n        return $coverage->get();\n    }\n\n    public function isEmpty()\n    {\n        return $this->lineCoverages->isEmpty();\n    }\n\n    public function toArray()\n    {\n        $results = array_pad([], $this->lineRange->getLastLineNumber(), null);\n        $coverages = $this->lineCoverages->getIterator();\n\n        foreach ($coverages as $coverage) {\n            $results[$coverage->getLineNumber() - 1] = $coverage->valueOf();\n        }\n\n        return $results;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,1,1,null,1,1,null,null,null,0,0,null,null,null,0,0,null,null,null,1,null,1,1,null,null,1,null,null,null,null,1,null,null,null,null,1,1,1,1,1,1,null,1,null,null,null,null,1,null,null,1]},{"name":"src\/value\/LineRange.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\value;\n\nuse coverallskit\\entity\\CoverageInterface;\nuse OutOfRangeException;\n\nclass LineRange\n{\n\n    protected $fromLineNumber = 1;\n    protected $toLineNumber = 1;\n\n    \/**\n     * @param integer $fromLineNumber\n     * @param integer $toLineNumber\n     *\/\n    public function __construct($fromLineNumber, $toLineNumber)\n    {\n        if ((int) $fromLineNumber <= 0 || (int) $toLineNumber <= 0) {\n            throw new OutOfRangeException('Can not use a specified number of lines');\n        }\n\n        if ((int) $fromLineNumber > (int) $toLineNumber) {\n            throw new OutOfRangeException('Can not use a specified range of lines');\n        }\n\n        $this->fromLineNumber = (int) $fromLineNumber;\n        $this->toLineNumber = (int) $toLineNumber;\n    }\n\n    public function getFirstLineNumber()\n    {\n        return $this->fromLineNumber;\n    }\n\n    public function getLastLineNumber()\n    {\n        return $this->toLineNumber;\n    }\n\n    \/**\n     * @param integer|CoverageInterface $coverage\n     * @return boolean\n     *\/\n    public function between($coverage)\n    {\n        if ($coverage instanceof CoverageInterface) {\n            $lineAt = $coverage->getLineNumber();\n        } else {\n            $lineAt = $coverage;\n        }\n\n        return $lineAt >= $this->getFirstLineNumber() && $lineAt <= $this->getLastLineNumber();\n    }\n\n    \/**\n     * @param integer|CoverageInterface $coverage\n     * @return boolean\n     *\/\n    public function contains($coverage)\n    {\n        return $this->between($coverage);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,1,1,null,null,1,1,null,null,1,1,1,null,null,null,1,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,1,1,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null]},{"name":"src\/entity\/Repository.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nuse coverallskit\\entity\\repository\\Commit;\nuse coverallskit\\entity\\repository\\Branch;\nuse coverallskit\\entity\\repository\\Remote;\nuse coverallskit\\entity\\collection\\RemoteCollection;\nuse Gitonomy\\Git\\Repository as GitRepository;\nuse coverallskit\\AttributePopulatable;\n\nclass Repository implements RepositoryInterface\n{\n\n    use AttributePopulatable;\n\n    protected $repository = null;\n    protected $head = null;\n    protected $branch = null;\n    protected $remotes = null;\n\n    public function __construct($directory)\n    {\n        $this->repository = new GitRepository(realpath($directory));\n        $this->resolveHeadCommit()\n            ->resolveBranch()\n            ->resolveRemotes();\n    }\n\n    protected function resolveHeadCommit()\n    {\n        $headCommit = $this->repository->getHeadCommit();\n        $this->head = new Commit([\n            'id' => $headCommit->getHash(),\n            'authorName' => $headCommit->getAuthorName(),\n            'authorEmail' => $headCommit->getAuthorEmail(),\n            'committerName' => $headCommit->getCommitterName(),\n            'committerEmail' => $headCommit->getCommitterEmail(),\n            'message' => $headCommit->getMessage()\n        ]);\n\n        return $this;\n    }\n\n    protected function resolveBranch()\n    {\n        $commit = $this->repository->getHeadCommit();\n        $branches = $this->repository->getReferences()->resolveBranches($commit);\n\n        $resolveBranch = $this->getDefaultBranch();\n\n        foreach ($branches as $branch) {\n            if ($branch->isRemote() === true) {\n                continue;\n            }\n            $resolveBranch = new Branch([\n                'name' => $branch->getName(),\n                'remote' => $branch->isRemote()\n            ]);\n        }\n\n        $this->branch = $resolveBranch;\n\n        return $this;\n    }\n\n    protected function resolveRemotes()\n    {\n        $remotes = $this->repository->run('remote', array('-v'));\n        $remotes = explode(\"\\n\", $remotes);\n\n        $remoteMap = array();\n\n        foreach ($remotes as $remote) {\n            if (empty($remote) === true) {\n                continue;\n            }\n            preg_match(\"\/(.+)\\s(.+\\.git)\/\", $remote, $mathes);\n\n            $name = $mathes[1];\n            $url = $mathes[2];\n\n            $remoteMap[$name] = array(\n                'name' => $name,\n                'url' => $url\n            );\n        }\n\n        $remoteValues = array_values($remoteMap);\n        $remotes = new RemoteCollection();\n\n        foreach ($remoteValues as $remote) {\n            $remotes->add( new Remote($remote) );\n        }\n        $this->remotes = $remotes;\n\n        return $this;\n    }\n\n    \/**\n     * @return coverallskit\\entity\\repository\\Branch\n     *\/\n    protected function getDefaultBranch()\n    {\n        $branch = new Branch([\n            'name' => 'master',\n            'remote' => false\n        ]);\n\n        return $branch;\n    }\n\n    \/**\n     * @return coverallskit\\entity\\repository\\Commit\n     *\/\n    public function getCommit()\n    {\n        return $this->head;\n    }\n\n    \/**\n     * @return coverallskit\\entity\\repository\\Branch\n     *\/\n    public function getBranch()\n    {\n        return $this->branch;\n    }\n\n    \/**\n     * @return coverallskit\\entity\\collection\\RemoteCollection;\n     *\/\n    public function getRemotes()\n    {\n        return $this->remotes;\n    }\n\n    public function isEmpty()\n    {\n        $commit = $this->getCommit();\n        return empty($commit);\n    }\n\n    public function toArray()\n    {\n        $values = [\n            'head' => $this->getCommit()->toArray(),\n            'branch' => (string) $this->getBranch(),\n            'remotes' => $this->getRemotes()->toArray()\n        ];\n\n        return $values;\n    }\n\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,1,null,null,null,null,null,null,null,null,1,1,1,1,1,null,null,null,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,1,1,null,1,null,1,1,0,null,1,1,1,1,1,null,1,null,1,null,null,null,null,1,1,null,1,null,1,1,1,null,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,1,1,null,1,null,null,null,null,null,null,null,1,1,null,1,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,0,null,null,1]},{"name":"src\/Configuration.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit;\n\nuse coverallskit\\entity\\service\\ServiceInterface;\nuse coverallskit\\entity\\RepositoryInterface;\n\n\n\/**\n * Class Configuration\n * @package coverallskit\n *\/\nclass Configuration\n{\n\n    use AttributePopulatable;\n\n    \/**\n     * @var string\n     *\/\n    private $name;\n\n    \/**\n     * @var string\n     *\/\n    private $token;\n\n    \/**\n     * @var \\coverallskit\\entity\\service\\ServiceInterface\n     *\/\n    private $service;\n\n    \/**\n     * @var \\coverallskit\\entity\\RepositoryInterface\n     *\/\n    private $repository;\n\n    \/**\n     * @param array $values\n     *\/\n    public function __construct(array $values)\n    {\n        $this->populate($values);\n    }\n\n    \/**\n     * @param ServiceInterface $service\n     *\/\n    private function setService(ServiceInterface $service)\n    {\n        $this->service = $service;\n    }\n\n    \/**\n     * @param RepositoryInterface $service\n     *\/\n    private function setRepository(RepositoryInterface $repository)\n    {\n        $this->repository = $repository;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getToken()\n    {\n        return $this->token;\n    }\n\n    \/**\n     * @return \\coverallskit\\entity\\service\\ServiceInterface\n     *\/\n    public function getService()\n    {\n        return $this->service;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getRepository()\n    {\n        return $this->repository;\n    }\n\n    \/**\n     * @param ReportBuilderInterface $builder\n     * @return ReportBuilderInterface\n     *\/\n    public function applyTo(ReportBuilderInterface $builder)\n    {\n        $builder->name($this->getName())\n            ->token($this->getToken())\n            ->service($this->getService())\n            ->repository($this->getRepository());\n\n        return $builder;\n    }\n\n    \/**\n     * @return ReportBuilder\n     *\/\n    public function createReportBuilder()\n    {\n        return $this->applyTo(new ReportBuilder());\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,null,null,null,1,null,null,1]},{"name":"script\/coveralls.php","source":"<?php\n\nnamespace coverallskit\\example;\n\nrequire_once __DIR__ . '\/..\/vendor\/autoload.php';\n\nuse coverallskit\\ReportBuilder;\nuse coverallskit\\ConfigurationLoader;\nuse coverallskit\\entity\\service\\Travis;\nuse coverallskit\\entity\\Coverage;\nuse coverallskit\\entity\\Repository;\nuse coverallskit\\entity\\SourceFile;\nuse coverallskit\\exception\\LineOutOfRangeException;\n\n\/**\n * Get the code coverage\n *\/\nxdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);\n\n$argv = array('..\/vendor\/bin\/pho');\n\nrequire_once __DIR__ . \"\/..\/vendor\/bin\/pho\";\n\n$result = xdebug_get_code_coverage();\nxdebug_stop_code_coverage();\n\n\n\/**\n * Generate a json file\n *\/\n$loader = new ConfigurationLoader();\n$config = $loader->loadFromFile(__DIR__ . '\/..\/coveralls.yml');\n\n$builder = $config->createReportBuilder();\n$builder->token(getenv('COVERALLS_REPO_TOKEN'));\n\nforeach ($result as $file => $coverage) {\n    if (preg_match('\/vendor\/', $file) || preg_match('\/spec\/', $file)) {\n        continue;\n    }\n\n    $source = new SourceFile($file);\n\n    foreach ($coverage as $line => $status) {\n        try {\n            if ($status === 1) {\n                $source->addCoverage(Coverage::executed($line));\n            } else if ($status === -1) {\n                $source->addCoverage(Coverage::unused($line));\n            }\n        } catch (LineOutOfRangeException $exception) {\n            echo $source->getName() . PHP_EOL;\n            echo $exception->getMessage() . PHP_EOL;\n        }\n    }\n\n    $builder->addSource($source);\n}\n\n\/\/$builder->build()->save()->upload();\n$builder->build()->save();","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/entity\/RepositoryInterface.php","source":"<?php\n\n\/**\n * This file is part of CoverallsKit.\n *\n * (c) Noritaka Horio <holy.shared.design@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n *\/\n\nnamespace coverallskit\\entity;\n\nuse coverallskit\\CompositeEntityInterface;\n\ninterface RepositoryInterface extends CompositeEntityInterface\n{\n\n    \/**\n     * @return repository\\Commit\n     *\/\n    public function getCommit();\n\n    \/**\n     * @return repository\\Branch\n     *\/\n    public function getBranch();\n\n    \/**\n     * @return collection\\RemoteCollection;\n     *\/\n    public function getRemotes();\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}],"run_at":"2014-07-21 18:13:23 +0900","service_job_id":"","service_name":"travis-ci"}